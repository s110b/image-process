name: Compress Images to AVIF

on: [push]

jobs:
  optimize-images:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install ImageMagick
      run: sudo apt-get install imagemagick

    - name: Rename Images
      run: |
        count=1
        for file in $(find . -type f \( -iname \*.jpg -o -iname \*.jpeg -o -iname \*.png \)); do
          date=$(identify -verbose "$file" | grep "exif:DateTimeOriginal:" | awk '{print $2}' | sed 's/:/-/g' | sed 's/ //g')
          if [ ! -z "$date" ]; then
            formattedDate=$(date -d "$date" +'%Y%m%d')
            randomNumber=$(shuf -i 1-1000 -n 1)
            newName="${formattedDate}${randomNumber}-${file##*/}"
          else
            newName=$(printf "%04d-%s" $count "${file##*/}")
            ((count++))
          fi
          mv "$file" "$(dirname "$file")/$newName"
        done

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install Squoosh CLI
      run: npm install @squoosh/cli -g

    - name: Compress Images to WebP and Log Size
      run: |
        mkdir -p after
        for file in $(find . -type f \( -iname \*.jpg -o -iname \*.jpeg -o -iname \*.png \)); do
          originalSize=$(du -m "$file" | cut -f1)
          squoosh-cli --webp '{}' "$file"
        done
        for compressedFile in $(find . -type f -iname \*.webp); do
          if [ -f "$compressedFile" ]; then
            mv "$compressedFile" "after/"
            compressedSize=$(du -m "after/$(basename "$compressedFile")" | cut -f1)
            echo "Compressed size: ${compressedSize}MB"
          else
            echo "Error: Compressed file not found - $compressedFile"
          fi
        done


    - name: Deploy Compressed Images to 'after' Branch
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        branch: after  # 目标分支
        folder: after  # 需要部署的文件夹
        commit-message: "Deploy compressed images2"
        clean: true
        single-commit: true
        force: true
        ssh-key: ${{ secrets.MY_SSH_PRIVATE_KEY }}  # Use the new token







